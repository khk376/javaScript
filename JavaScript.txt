Java Script

1. html 브라우저 내에서 실행되는 client side 언어

2. 브라우저 기능(해석기)
	1. html
	2. css
	3. java script
	
3. 개발 방식 - 두가지 방법

	첫번째 - 별도의 java script 파일로 개발. 개발후 html에서 적용
			1. 외부의 분리된 파일
			2. 확장자 : *.js
			3. [재사용성] 고려한 개발 구조
			4. 이미 잘 구성된 java script 함수들 제공
				- java script 기본이 필수
				1. jQuery
				2. Vue
				3. React
				4. ...
			5. html에 적용하는 코드
				<script src="경로와 file명.js"></script>
				
	두번째 - html 파일에 직접 코드로 개발
			1. 내장 구조
			2. 재사용성 고려하지 않은 해당 html에서만 사용하는 경우 
			3. <script>...</script>
			4. 주석 - 자바와 도일
				// 한줄 
				/* */ 여러줄
			
4. java script(js) 필요한 사유
	1. 웹 기술
	2. 동적 화면 구성을 위한 필수 처리 기술
	
5. 문법
	1. 변수 선언시 타입 명시 하지 않음
		1. 변수
			[var] 변수명 [=값]
		2. 함수
			function 함수명([...]){[...]}
			
	2. 예시
		이름값을 표현하는 문자열이라 가정
		String name; - java
		String getName() {...}
		
		name varchar2(20) - sql
		name - python
			def getName():
				return name
				
6. java script 에서 사용 가능한 함수 종류
	1. html 브라우저 자체의 내장 객체들이 제공하는 함수
		1. 내장 객체 및 제공 함수(BOM)
			1. window 라는 상위 객체
			2. document : window 상속 받는 객체
			3. html tag를 기준으로 브라우저 객체 사용시에는
				document객체를 기반으로 사용
				<input id="nameView" type="text">
				- id값이 nameView라는 tag에 이름 넣어주세요
				- document.getElementById("nameView").value="이름"
				
		
		2. java script 자체 지원 함수
		3. 사용자 정의 함수

7. java script의 문법 특징
	1. 변수
		1. 타입없이 선언
		2. 실시간 가변적인 타입으로 변경이 가능
		3. 선언 문법
			1. var
				1. 전연 변수에 선언시 - 전역 변수	( var1="ㅇㅇ";)
				2. 함수 내부에 var로 변수 선언시 - 로컬 변수 ( var var1="ㅇㅇ";)
				
			2. var 없이 선언
				1. 전역 변수 영역에 선언시 - 전역변수
				2. 함수 내부에 선언시 - 전역 변수
				
		   *결론. 함수 내부에 var로 선언할때만 로컬!!
	2. 함수
		- parameter 개수와 무관하게 호출 가능
		
		
8. review
	1. 사용 가능한 함수들
		1. 브라우저 내장 객체가 제공
			document - write(), getElementById(), alert()
			...

		2. java script자체 제공
			- split() ...
			- https://www.w3schools.com/jsref/jsref_obj
		3. 사용자 정의
			1. function 함수 ([..]){[..]}
			2. 자바스크립트 리터럴 형태의 객체내의 함수
				data = {
					property명 : 'value'
					getName : function([..]){[..]}
				}
			3. 익명 함수
				- 이름 없음, 재사용성 고려 안함
				- 권장 :
					브라우저 </body>가 실행되자마자
					이벤트성 js 실행 로직이 있을 경우 주로 사용 
				window.onload = function() {
					로딩 직후 처리 로직
				}
	2. 데이터
		1. CSV 포멧 데이터 처리 연습
			1. 결측치 여부? 
			2. 사용하고자 하는 데이터에 문제가 있나? 업나?
			...
				: 전처리(서버단에서 처리)
				: 
		2. JSON 형태의 데이터 포멧 처리 연습
		3. 배열 형태의 데이터 포멧 처리 연습 

9. 비동기 기술 추가 학습
	1. 서버와 클라이언트간에 실시간 요청, 응답 진행은 되나
		화면 갱신. 즉 reflash 없이 통신하는 기술
	2. 주의 사항
		- 인증 처럼 완벽한 인증 후에만 실행해야 하는 로직들은
		  비동기 처리 적용 고려 필수
	3. 필요 기술셋
		1. 서버의 응답 로직
		2. java script
			- 비동기 처리 전담 객체 존재
	4. 비동기 대표 로직
		- 검색
	
10 java script 객체
	1. new Object()로 생성
	2. 객체 리터럴 방식
		data = {
		name: "이름",
		age: 10 
	}
	
11. JSON 객체(데이터 표현에 특화된 객체)
	data= {
		'name'="이름",
		
12. 비동기 처리 기술 암기사항
	1. java script 내에 비동기 전담 객체 존재
		- XMLHttpRequest(xhr)
	2. 참고
		Internet Explorer(ie)
		- ie 6까지 : XMLHttpRequest 미존재
					WindowActive~ 라는 API로 계속 우김
		- ie 7부터 ~ : XMLHttpRequest 추가 + WindowActive~ 둘다 공존
		- non-ie : XMLHttpRequest 구버전 모든 브라우저들 지원
	
	3. XMLHttpRequest 기능
		1. 서버에 요청도 하고 서버로 부터 응답되는 데이터 획득
		2. 응답 상태 번호값 획득해서 체크 
		
	4. 응답상태 확인
		1. 404 : 요청 url에 해당하는 자원이 서버에 없을때
		2. 200 : 응답 성공 
		3. 500 : 서버 개발 또는 서버 시스템 문제
		...
		4. 요청 시작? 요청 진행중? 요청 완료? 응답 시작? 응답 완료? 체크 가능한 번호? 
	

function loadDoc() {
	-- 비동기 요청, 응답 처리 js 객체
  var xhttp = new XMLHttpRequest();
  
  -- onreadystatechange : 응답을 자동 감지해서 응답이 오면 함수 호출
  -- readyState : 0~4값 보유 가능, 
	단 요청 시작(0), 요청 진행(1), 요청 완료(2), 응답 시작(3), 응답 완료(4)
  -- status : 응답에 대한 상태값 보유 속성
		404
		500
		200 : 정상 응답 완료
		
  -- responseText : 응답된 데이터를 자동으로 보유하게 되는 속성
		단, csv, 일반 text, json의 문자열, html형태의 문자열..
  -- responseXML : 응답된 데이터 포멧이 xml인 경우에 한해서만 응답 데이터 보유 속성 
	
  xhttp.onreadystatechange = function() {
  
    if (this.readyState == 4 && this.status == 200) {
     document.getElementById("demo").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "ajax_info.txt", true);
  xhttp.send();
}
	
	
	
	
	
	
	
	
	
요청 데이터 - HttpRequest
응답 데이터 - HttpResponse
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		